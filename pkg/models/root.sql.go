// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: root.sql

package models

import (
	"context"
)

const createContact = `-- name: CreateContact :one
insert into contacts (
        first_name,
        last_name,
        nickname,
        email,
        pronouns,
        namespace
    )
values ($1, $2, $3, $4, $5, $6)
returning id
`

type CreateContactParams struct {
	FirstName string
	LastName  string
	Nickname  string
	Email     string
	Pronouns  string
	Namespace string
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.Email,
		arg.Pronouns,
		arg.Namespace,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createJournalEntry = `-- name: CreateJournalEntry :one
insert into journal_entries (title, body, rating, namespace)
values ($1, $2, $3, $4)
returning id
`

type CreateJournalEntryParams struct {
	Title     string
	Body      string
	Rating    int32
	Namespace string
}

func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJournalEntry,
		arg.Title,
		arg.Body,
		arg.Rating,
		arg.Namespace,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteJournalEntry = `-- name: DeleteJournalEntry :exec
delete from journal_entries
where id = $1
    and namespace = $2
`

type DeleteJournalEntryParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) DeleteJournalEntry(ctx context.Context, arg DeleteJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteJournalEntry, arg.ID, arg.Namespace)
	return err
}

const getContacts = `-- name: GetContacts :many
select id, first_name, last_name, nickname, email, pronouns, namespace
from contacts
where namespace = $1
order by first_name desc
`

func (q *Queries) GetContacts(ctx context.Context, namespace string) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Nickname,
			&i.Email,
			&i.Pronouns,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJournalEntries = `-- name: GetJournalEntries :many
select id, title, date, body, rating, namespace
from journal_entries
where namespace = $1
order by date desc
`

func (q *Queries) GetJournalEntries(ctx context.Context, namespace string) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, getJournalEntries, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.Body,
			&i.Rating,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJournalEntry = `-- name: GetJournalEntry :one
select id, title, date, body, rating, namespace
from journal_entries
where id = $1
    and namespace = $2
`

type GetJournalEntryParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) GetJournalEntry(ctx context.Context, arg GetJournalEntryParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getJournalEntry, arg.ID, arg.Namespace)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Date,
		&i.Body,
		&i.Rating,
		&i.Namespace,
	)
	return i, err
}

const updateJournalEntry = `-- name: UpdateJournalEntry :exec
update journal_entries
set title = $3,
    body = $4,
    rating = $5
where id = $1
    and namespace = $2
`

type UpdateJournalEntryParams struct {
	ID        int32
	Namespace string
	Title     string
	Body      string
	Rating    int32
}

func (q *Queries) UpdateJournalEntry(ctx context.Context, arg UpdateJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateJournalEntry,
		arg.ID,
		arg.Namespace,
		arg.Title,
		arg.Body,
		arg.Rating,
	)
	return err
}
