// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: root.sql

package models

import (
	"context"
)

const createJournalEntry = `-- name: CreateJournalEntry :exec
insert into journal_entries (title, body)
values ($1, $2)
`

type CreateJournalEntryParams struct {
	Title string
	Body  string
}

func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, createJournalEntry, arg.Title, arg.Body)
	return err
}

const deleteJournalEntry = `-- name: DeleteJournalEntry :exec
delete from journal_entries
where id = $1
`

func (q *Queries) DeleteJournalEntry(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteJournalEntry, id)
	return err
}

const getJournalEntries = `-- name: GetJournalEntries :many
select id, title, date, body
from journal_entries
`

func (q *Queries) GetJournalEntries(ctx context.Context) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, getJournalEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
