// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: root.sql

package models

import (
	"context"
)

const createJournalEntry = `-- name: CreateJournalEntry :one
insert into journal_entries (title, body, rating)
values ($1, $2, $3)
returning id
`

type CreateJournalEntryParams struct {
	Title  string
	Body   string
	Rating int32
}

func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJournalEntry, arg.Title, arg.Body, arg.Rating)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteJournalEntry = `-- name: DeleteJournalEntry :exec
delete from journal_entries
where id = $1
`

func (q *Queries) DeleteJournalEntry(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteJournalEntry, id)
	return err
}

const getJournalEntries = `-- name: GetJournalEntries :many
select id, title, date, body, rating
from journal_entries
order by date desc
`

func (q *Queries) GetJournalEntries(ctx context.Context) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, getJournalEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.Body,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJournalEntry = `-- name: GetJournalEntry :one
select id, title, date, body, rating
from journal_entries
where id = $1
`

func (q *Queries) GetJournalEntry(ctx context.Context, id int32) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getJournalEntry, id)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Date,
		&i.Body,
		&i.Rating,
	)
	return i, err
}

const updateJournalEntry = `-- name: UpdateJournalEntry :exec
update journal_entries
set title = $2,
    body = $3,
    rating = $4
where id = $1
`

type UpdateJournalEntryParams struct {
	ID     int32
	Title  string
	Body   string
	Rating int32
}

func (q *Queries) UpdateJournalEntry(ctx context.Context, arg UpdateJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateJournalEntry,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Rating,
	)
	return err
}
